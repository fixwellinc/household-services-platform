generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                       @id @default(cuid())
  email             String                       @unique
  password          String
  name              String?
  role              String                       @default("CUSTOMER")
  avatar            String?
  phone             String?
  address           String?
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt
  subscriptionId    String?
  serviceIds        String[]
  bookingIds        String[]
  messageIds        String[]
  quoteIds          String[]
  isActive          Boolean                      @default(true)
  notifications     Json?                        @default("{\"sms\": false, \"email\": true}")
  postalCode        String?
  assignedEmployee  CustomerEmployeeAssignment?  @relation("CustomerAssignment")
  assignedCustomers CustomerEmployeeAssignment[] @relation("EmployeeAssignments")
  subscriptionUsage SubscriptionUsage?
  
  // Add relation to Subscription
  subscription      Subscription?
}

model CustomerEmployeeAssignment {
  id         String   @id @default(cuid())
  customerId String   @unique
  employeeId String
  assignedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   User     @relation("CustomerAssignment", fields: [customerId], references: [id])
  employee   User     @relation("EmployeeAssignments", fields: [employeeId], references: [id])
}

model Subscription {
  id                        String    @id @default(cuid())
  userId                    String    @unique
  tier                      String
  status                    String    @default("ACTIVE")
  stripeCustomerId          String?
  stripeSubscriptionId      String?
  currentPeriodStart        DateTime?
  currentPeriodEnd          DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  canCancel                 Boolean   @default(true)
  cancellationBlockedAt     DateTime?
  cancellationBlockedReason String?
  
  // Add relation back to User
  user                     User      @relation(fields: [userId], references: [id])
}

model SubscriptionUsage {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  subscriptionId         String
  tier                   String
  priorityBookingUsed    Boolean   @default(false)
  priorityBookingUsedAt  DateTime?
  priorityBookingCount   Int       @default(0)
  discountUsed           Boolean   @default(false)
  discountUsedAt         DateTime?
  discountAmount         Float     @default(0)
  freeServiceUsed        Boolean   @default(false)
  freeServiceUsedAt      DateTime?
  freeServiceType        String?
  emergencyServiceUsed   Boolean   @default(false)
  emergencyServiceUsedAt DateTime?
  maxPriorityBookings    Int       @default(0)
  maxDiscountAmount      Float     @default(0)
  maxFreeServices        Int       @default(0)
  maxEmergencyServices   Int       @default(0)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id])
}

model Service {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  category    String
  complexity  String
  basePrice   Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookingIds  String[]
  quoteIds    String[]
}

model Booking {
  id                    String   @id @default(cuid())
  customerId            String
  serviceId             String
  scheduledDate         DateTime
  status                String   @default("PENDING")
  totalAmount           Float
  discountAmount        Float   @default(0)
  finalAmount           Float
  notes                 String?
  stripePaymentIntentId String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  messageIds            String[]
  perkType              String?
  usedSubscriptionPerk  Boolean @default(false)
}

model Message {
  id         String   @id @default(cuid())
  bookingId  String
  senderId   String
  receiverId String
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Quote {
  id               String    @id @default(cuid())
  userId           String?
  email            String
  serviceId        String?
  message          String
  status           String    @default("PENDING")
  adminReply       String?
  adminReplyPrice  Float?
  adminReplySentAt DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
}

model EmailTemplate {
  id         String   @id @default(cuid())
  name       String   @unique
  subject    String
  body       String?
  html       String?
  isHtmlMode Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String?
}

model ChatSession {
  id                 String        @id @default(cuid())
  customerName       String
  customerEmail      String?
  status             String        @default("ACTIVE")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  lastAdminReadAt    DateTime?
  lastCustomerReadAt DateTime?
  messages           ChatMessage[]
}

model ChatMessage {
  id            String      @id @default(cuid())
  chatSessionId String
  sender        String
  senderType    String
  message       String
  sentAt        DateTime    @default(now())
  viaSMS        Boolean     @default(false)
  readBy        String[]
  fileName      String?
  fileType      String?
  fileUrl       String?
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id])
}

enum SubscriptionTier {
  STARTER
  HOMECARE
  PRIORITY
}
