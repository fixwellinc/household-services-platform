// This is your Prisma schema file for PostgreSQL
// learn more: https://pris.ly/d/postgresql

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  name          String?
  role          String   @default("CUSTOMER")
  avatar        String?
  phone         String?
  address       String?
  isActive      Boolean  @default(true)
  notifications Json?    @default("{\"email\": true, \"sms\": false}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Reference fields (manual lookup in code)
  subscriptionId String?
  serviceIds     String[]
  bookingIds     String[]
  messageIds     String[]
  quoteIds       String[]
  // Employee assignments
  assignedCustomers CustomerEmployeeAssignment[] @relation("EmployeeAssignments")
  assignedEmployee   CustomerEmployeeAssignment? @relation("CustomerAssignment")
}

model CustomerEmployeeAssignment {
  id         String   @id @default(cuid())
  customerId String   @unique
  employeeId String
  assignedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  customer   User     @relation("CustomerAssignment", fields: [customerId], references: [id])
  employee   User     @relation("EmployeeAssignments", fields: [employeeId], references: [id])
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  tier          String
  status        String   @default("ACTIVE")
  stripeCustomerId String?
  stripeSubscriptionId String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Service {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String
  category      String
  complexity    String
  basePrice     Float
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bookingIds    String[]
  quoteIds      String[]
}

model Booking {
  id            String   @id @default(cuid())
  customerId    String
  serviceId     String
  scheduledDate DateTime
  status        String   @default("PENDING")
  totalAmount   Float
  discountAmount Float   @default(0)
  finalAmount   Float
  notes         String?
  stripePaymentIntentId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  messageIds    String[]
}

model Message {
  id            String   @id @default(cuid())
  bookingId     String
  senderId      String
  receiverId    String
  content       String
  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())
}

model Quote {
  id              String   @id @default(cuid())
  userId          String?
  email           String
  serviceId       String?
  message         String
  status          String   @default("PENDING")
  adminReply      String?
  adminReplyPrice Float?
  adminReplySentAt DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
}

// Enums are not supported in MongoDB, using strings instead
// UserRole: "CUSTOMER", "ADMIN"
// SubscriptionTier: "STARTER", "HOMECARE", "PRIORITY"
// SubscriptionStatus: "ACTIVE", "CANCELLED", "PAST_DUE", "UNPAID"
// ServiceCategory: "CLEANING", "MAINTENANCE", "REPAIR", "ORGANIZATION", "OTHER"
// ServiceComplexity: "SIMPLE", "MODERATE", "COMPLEX"
// BookingStatus: "PENDING", "CONFIRMED", "IN_PROGRESS", "COMPLETED", "CANCELLED" 

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  subject   String
  body      String?
  html      String?
  isHtmlMode Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
} 

model ChatSession {
  id            String   @id @default(cuid())
  customerName  String
  customerEmail String?
  status        String   @default("ACTIVE")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastAdminReadAt DateTime?
  lastCustomerReadAt DateTime?
  messages      ChatMessage[]
}

model ChatMessage {
  id            String   @id @default(cuid())
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id])
  chatSessionId String
  sender        String   // 'customer', 'admin', 'manager', or phone/email
  senderType    String   // 'customer', 'admin', 'sms'
  message       String
  sentAt        DateTime @default(now())
  viaSMS        Boolean  @default(false)
  readBy        String[] // 'customer', 'admin'
  // File attachment fields
  fileName      String?
  fileType      String?
  fileUrl       String?
} 

enum SubscriptionTier {
  STARTER
  HOMECARE
  PRIORITY
} 